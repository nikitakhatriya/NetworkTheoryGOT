# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S2nhwXpjpbHkXQmxg9IXh7Hudi-hXip4
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

from collections import defaultdict

import networkx as nx
import nxviz as nxv
import community

from google.colab import drive
drive.mount('/content/drive')

!pip install nxviz



cd drive/My Drive

cd gameofthrones-master/data/

def make_graph(nodes_df, edges_df):
    g = nx.Graph()

    for i,row in nodes.iterrows():
        keys = row.index.tolist()
        values = row.values
        # The dict contains all attributes
        g.add_node(row[0], **dict(zip(keys,values)))

    for i,row in edges.iterrows():
        keys = row.index.tolist()
        values = row.values
        g.add_edge(row[0], row[1],
                   **dict(zip(keys,values)))
    
    return g

# g = nx.read_edgelist('got-s7-edges.csv',create_using=nx.Graph(),nodetype=str)
# # print nx.info(g, n=none)
# nx.draw(g)
# plt.show()

nodes = pd.read_csv('got-s7-nodes.csv', index_col=1)
edges = pd.read_csv('got-s7-edges.csv')
g = make_graph(nodes, edges)

nx.draw(g, with_labels=True, edge_color='black')
print(g.nodes)
print(g.edges)

"""Node link diagram :
The nodes are shown as a jumbled mess with too much overlap.
"""

c = nxv.CircosPlot(g,
                   edge_width=(edges['Weight'] / edges['Weight'].quantile(0.97)).tolist(),
                   node_labels=True, node_label_layout='rotation',
  ) 
c.draw()

"""Circos plot which is much easier to read."""

deg_cen = nx.degree_centrality(g)
nodes['deg_cen'] = nodes['Id'].apply(lambda x: deg_cen[x])
g = make_graph(nodes, edges)

fig, ax = plt.subplots(figsize=(20,8))
sns.barplot(data=nodes.nlargest(50, 'deg_cen'), 
            x='Id', y='deg_cen', 
            ax=ax);
ax.set_xticklabels(ax.get_xticklabels(), rotation=90);

"""Determining the most important character using the degree centrality of the nodes."""

a = nxv.ArcPlot(g,  
                node_size=[10*g.nodes[n]['deg_cen'] for n in g.nodes], 
                edge_width=(edges['Weight'] / edges['Weight'].quantile(.95)).tolist(),
                figsize=(10,10))
a.draw()

"""Arc plot to visualize degree centrality."""

cmt = community.best_partition(g, weight='Weight')
nodes['cmt'] = [v for c,v in cmt.items()]
g = make_graph(nodes, edges)

c = nxv.CircosPlot(g, node_color='cmt', node_grouping='cmt',
                   node_labels=True, node_label_layout='rotation',
                   edge_width=(edges['Weight'] / edges['Weight'].quantile(0.98)).tolist(),
                   figsize=(8,8))
c.draw()

pos = nx.spring_layout(g)  # compute graph layout
for cmt_num in np.unique([v for c,v in cmt.items()]):
    partition = community.best_partition(g)

    nodelist = []
    # one community against the others
    for node, c in partition.items():
        if c == cmt_num:
            nodelist.append(node)
        else:
            partition[node] = -1  # put all the other communities in one communitiy
    
    sg = g.subgraph(nodelist)
    edge_widths = [sg.edges[e]['Weight'] for e in sg.edges]
    edge_widths = [w/np.quantile(edge_widths, 0.9) for w in edge_widths]
    
    fig, ax = plt.subplots(figsize=(15,10))
    nx.draw(sg, pos, with_labels=True, width=edge_widths)
    ax.set_title(f'Community {cmt_num}');

"""Graph Partitioning using min-cut method to determine which all characters are in the same faction."""